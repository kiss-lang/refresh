(import kiss_firefox.API)
(import refresh.WatchList)
(import refresh.Message)

(API.browser.menus.create
    (object
        id "watch_element"
        title "Watch this element"
        contexts ["link" "page"]))

(API.browser.menus.create
    (object
        id "unwatch_element"
        title "Unwatch this element"
        contexts ["link" "page"]))

(API.browser.menus.create
    (object
        id "clear_watched_elements"
        title "Clear this page's watched elements"
        contexts ["all"]))

// function source: https://stackoverflow.com/a/30484878 CC-BY-SA 3.0
(var getSelectorFunction "
function getSelector(node) {
    var id = node.getAttribute('id');

    if (id) {
        return '#'+id;
    }

    var path = '';

    while (node) {
        var name = node.localName;
        var parent = node.parentNode;

        if (!parent) {
            path = name + ' > ' + path;
            continue;
        }

        if (node.getAttribute('id')) {
            path = '#' + node.getAttribute('id') + ' > ' + path;
            break;
        }

        var sameTagSiblings = [];
        var children = parent.childNodes;
        children = Array.prototype.slice.call(children);

        children.forEach(function(child) {
            if (child.localName == name) {
                sameTagSiblings.push(child);
            }
        });

        // if there are more than one children of that type use nth-of-type

        if (sameTagSiblings.length > 1) {
            var index = sameTagSiblings.indexOf(node);
            name += ':nth-of-type(' + (index + 1) + ')';
        }

        if (path) {
            path = name + ' > ' + path;
        } else {
            path = name;
        }

        node = parent;
    }

    return path;
}
")

(API.browser.menus.onClicked.addListener ->[info tab] {
    (withFunctions
        [
            (runCode [code]
                (API.browser.tabs.executeScript tab.id
                    (objectWith
                        info.frameId
                        code)))
        ]
        (case info.menuItemId
            ("watch_element"
                (runCode "
$getSelectorFunction
var element = browser.menus.getTargetElement(${info.targetElementId});
browser.runtime.sendMessage({'action': 'addToWatchList', 'url': window.location.href, 'selector': getSelector(element), 'innerHTML': element.innerHTML});
                        "))
            ("unwatch_element"
                (runCode "
$getSelectorFunction
var element = browser.menus.getTargetElement(${info.targetElementId});
browser.runtime.sendMessage({'action': 'removeFromWatchList', 'url': window.location.href, 'selector': getSelector(element)});
                        "))
            ("clear_watched_elements"
                (runCode "
browser.runtime.sendMessage({'action': 'clearWatchList', 'url': window.location.href});
                        "))
            (never otherwise)))
})

(API.browser.runtime.onMessage.addListener ->[:Message message sender sendResponse] {
    (case message
        ((objectWith [action "addToWatchList"] url selector innerHTML)
            (WatchList.add url selector innerHTML))
        ((objectWith [action "removeFromWatchList"] url selector)
            (WatchList.remove url selector))
        ((objectWith [action "clearWatchList"] url)
            (WatchList.clear url))
        (never otherwise))
    null
})

(API.browser.browserAction.onClicked.addListener ->[tab info] {
    (WatchList.forEachUrl ->url {
        (API.browser.tabs.create (objectWith url))
    })
})