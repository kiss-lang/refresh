(import kiss_firefox.API)
(import haxe.Serializer)
(import haxe.Unserializer)

(defMacro withWatchList [change listSymbol &body body]
    `(awaitLet [_listObj (API.browser.storage.sync.get (object watchList (new Map<String,Array<Dynamic>>)))
                    &sync :haxe.DynamicAccess<Dynamic> ,listSymbol (dictGet _listObj "watchList")]
        ,@body
        (if ,change
                (API.browser.storage.sync.set (object watchList ,listSymbol))
            null)))

(function add [:String url :String selector :String innerHTML]
    (withWatchList true wl
        (ifLet [urlList (dictGet wl url)]
                (urlList.push (objectWith selector innerHTML))
            (dictSet wl url [(objectWith selector innerHTML)]))))

(function remove [:String url :String selector]
    (withWatchList true wl
        (whenLet [urlList (dictGet wl url)]
            (doFor [idx obj] (enumerate (cast urlList Array<Dynamic>))
                (when (= obj.selector selector)
                    (urlList.splice idx 1)
                    (when (= 0 urlList.length)
                        (wl.remove url))
                    (break))))))

(function clear [:String url]
    (withWatchList true wl
        (when (wl.exists url)
            (wl.remove url))))

(function :Void forEachElement [:String url :(String,Void->Void)->Void operation :Void->Void cc]
    (withWatchList false wl
        (whenLet [urlList (dictGet wl url)]
            (withFunctions
                [
                    (next []
                        (ifLet [obj (urlList.shift)]
                                (operation obj.selector next)
                            (cc)))
                ]
                (next)))))

(function :Void forEachUrl [:(String,Void->Void)->Void operation]
    (withWatchList false wl
        (let [urls (collect (wl.keys))]
            (withFunctions
                [
                    (:Void next []
                        (whenLet [url (urls.shift)
                                list (dictGet wl url)]
                            (if !(= "h" url) // I give up trying to understand why "h" is a key in every map in this environment
                                    (operation url next)
                                (next))))
                ]
                (next)))))

(function :Void update [:String url :String selector :String innerHTML :(String,String)->Void onChange :Void->Void onSame :Void->Void cc]
    (awaitLet [_
                    (withWatchList true wl
                        (whenLet [urlList (dictGet wl url)]
                            (doFor obj (cast urlList Array<Dynamic>)
                                (when (= obj.selector selector)
                                    (if (= innerHTML obj.innerHTML)
                                            (onSame)
                                        {
                                            (onChange obj.innerHTML innerHTML)
                                            (set obj.innerHTML innerHTML)
                                        })
                                    (break)))))]
        (cc)))